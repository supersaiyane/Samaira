version: "3.9"

services:
  # =========================
  # Database
  # =========================
  db:
    image: postgres:15
    container_name: finops-db
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - ./db/init/01_init.sql:/docker-entrypoint-initdb.d/01_init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME} -h db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =========================
  # Db Testing
  # =========================
  db_test:
    image: postgres:15
    container_name: finops-db-test
    restart: always
    environment:
      POSTGRES_USER: finops
      POSTGRES_PASSWORD: finops123
      POSTGRES_DB: finopsdb_test
    ports:
      - "5433:5432"
    volumes:
      - pgdata_test:/var/lib/postgresql/data

  # =========================
  # Vault (Secrets Manager)
  # =========================
  vault:
    image: vault:1.15.2
    container_name: finops-vault
    restart: always
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root
      VAULT_DEV_LISTEN_ADDRESS: "0.0.0.0:8200"
    volumes:
      - ./vault/config:/vault/config
      - ./vault/policies:/vault/policies
      - ./vault/data:/vault/data
      - ./vault/setup.sh:/vault/setup.sh
      - ./vault/templates:/vault/templates
      - vault-secrets:/vault/secrets      
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8200/v1/sys/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =========================
  # Backend (FastAPI)
  # =========================
  backend:
    build: ./backend
    container_name: finops-backend
    restart: always
    ports:
      - "8000:8000"
    volumes:
      - ./app:/app/app
      - vault-secrets:/vault/secrets:ro
    env_file:
      - /vault/secrets/db.env
      - /vault/secrets/aws.env
      - /vault/secrets/webhooks.env
    depends_on:
      db:
        condition: service_healthy
      vault:
        condition: service_healthy
      vault-agent:
        condition: service_started
      

  # =========================
  # Frontend (React + Nginx)
  # =========================
  frontend:
    build: ./frontend
    container_name: finops-frontend
    restart: always
    ports:
      - "3000:80"
    depends_on:
      - backend

  # =========================
  # Airflow (DAGs)
  # =========================
  airflow:
    build: ./airflow
    container_name: finops-airflow
    restart: always
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      vault-agent:
        condition: service_started   
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - vault-secrets:/vault/secrets:ro

  # =========================
  # Prometheus
  # =========================
  prometheus:
    image: prom/prometheus:v2.49.1
    container_name: finops-prometheus
    restart: always
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - backend

  # =========================
  # Grafana
  # =========================
  grafana:
    image: grafana/grafana:10.4.1
    container_name: finops-grafana
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/provisioning/dashboards:/etc/grafana/provisioning/dashboards-providers
      - ./monitoring/provisioning/alerting:/etc/grafana/provisioning/alerting
      - vault-secrets:/vault/secrets:ro
    env_file:
      - /vault/secrets/webhooks.env 
    depends_on:
      - prometheus
      - loki

  # =========================
  # Loki
  # =========================
  loki:
    image: grafana/loki:2.9.3
    container_name: finops-loki
    restart: always
    command: -config.file=/etc/loki/local-config.yml
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yml

  # =========================
  # Promtail
  # =========================
  promtail:
    image: grafana/promtail:2.9.3
    container_name: finops-promtail
    restart: always
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

  # =========================
  # Postgres Exporter
  # =========================
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: finops-postgres-exporter
    restart: always
    environment:
      DATA_SOURCE_NAME: "postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - db

  # =========================
  # Airflow Exporter
  # =========================
  airflow-exporter:
    image: oat9000/airflow-exporter:latest
    container_name: finops-airflow-exporter
    restart: always
    environment:
      - AIRFLOW_BASE_URL=http://airflow:8080
      - AIRFLOW_USERNAME=admin
      - AIRFLOW_PASSWORD=admin
    ports:
      - "9112:9112"
    depends_on:
      - airflow

  # =========================
  # PlantUML Server
  # =========================
  plantuml:
    image: plantuml/plantuml-server:jetty
    container_name: plantuml-server
    restart: unless-stopped
    ports:
      - "8082:8080"
    environment:
      - JAVA_OPTS=-Xmx512m

  # =========================
  # Mermaid Live Editor
  # =========================
  mermaid:
    image: ghcr.io/mermaid-js/mermaid-live-editor:latest
    container_name: mermaid-live-editor
    restart: unless-stopped
    ports:
      - "8081:8080"

  # =========================
  # Honkit for Documentation
  # =========================
  docs:
    build: ./docs
    container_name: finops-docs
    restart: always
    ports:
      - "4000:4000"
    volumes:
      - ./docs:/docs

  # =========================
  # Ollama (Local LLM for fallback)
  # =========================
  ollama:
    image: ollama/ollama:latest
    container_name: finops-ollama
    restart: unless-stopped
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  pgdata:
  grafana-data:
  ollama-data:
